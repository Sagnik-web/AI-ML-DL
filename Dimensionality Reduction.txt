#  Principal Component Analysis (PCA)
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.datasets import load_iris

# Load a sample dataset (Iris)
data = load_iris()
X = data.data

# Standardize the data (important for PCA)
from sklearn.preprocessing import StandardScaler
X_std = StandardScaler().fit_transform(X)

# Apply PCA
pca = PCA(n_components=2)  # Reduce to 2 dimensions
X_pca = pca.fit_transform(X_std)

# Create a DataFrame for visualization
df_pca = pd.DataFrame(data=X_pca, columns=['PC1', 'PC2'])
df_pca['target'] = data.target

print(df_pca.head())











# t-Distributed Stochastic Neighbor Embedding (t-SNE)
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt

# Apply t-SNE
tsne = TSNE(n_components=2, random_state=42)
X_tsne = tsne.fit_transform(X_std)

# Plotting the results
plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=data.target, cmap='viridis')
plt.title('t-SNE Visualization')
plt.xlabel('Component 1')
plt.ylabel('Component 2')
plt.colorbar()
plt.show()







# Linear Discriminant Analysis (LDA)

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

# Apply LDA
lda = LDA(n_components=2)
X_lda = lda.fit_transform(X, data.target)

# Create a DataFrame for visualization
df_lda = pd.DataFrame(data=X_lda, columns=['LD1', 'LD2'])
df_lda['target'] = data.target

print(df_lda.head())













#  Feature Selection Methods
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression

# Create a logistic regression model
model = LogisticRegression()

# RFE for feature selection
rfe = RFE(model, n_features_to_select=2)
X_rfe = rfe.fit_transform(X_std, data.target)

print(X_rfe[:5])  # Show selected features



















